from application import db
from application.models import Follow

import factory
import factory.fuzzy

import random
from datetime import datetime

#----------------------------------------------------------------------------#
# model
#----------------------------------------------------------------------------#
class DelegatedUser(db.Model):
    # follow the best pratice:
    __tablename__ = 'delegated_users'

    # id:
    id = db.Column(db.String(64), primary_key=True)

    # account info:
    email = db.Column(db.String(64), unique=True, index=True)
    
    # profile info:
    nickname = db.Column(db.String(64), index=True)

    # posts:
    posts = db.relationship('Post', backref='author', lazy=True)

    # followed:
    followed = db.relationship(
        'Follow',
        foreign_keys=[Follow.follower_id],
        # on follow side, follow.follower will be a ready-to-use object generated by join
        backref=db.backref('follower', lazy='joined'),
        # on user side, user.followed will be a query object
        lazy='dynamic',
        # child object should follow along parent in all cases:
        cascade='all, delete-orphan'
    )

    # followers:
    followers = db.relationship(
        'Follow',
        foreign_keys=[Follow.followed_id],
        # on follow side, follow.followed will be a ready-to-use object generated by join
        backref=db.backref('followed', lazy='joined'),
        # on user side, user.followers will be a query object
        lazy='dynamic',
        # child object should follow along parent in all cases:
        cascade='all, delete-orphan'
    )

    def __repr__(self):
        return f'<User {self.nickname}>' 

    def follow(self, user):
        """ let self follow user
        """
        if not self.is_following(user):
            follow = Follow(
                follower_id = self.id,
                followed_id = user.id
            )
            db.session.add(follow)
    
    def unfollow(self, user):
        """ let self unfollow user
        """
        if self.is_following(user):
            follow = self.followed.filter(
                Follow.followed_id == user.id
            ).first()
            db.session.delete(follow)
    
    def is_following(self, user):
        """ whether self follows user
        """
        follow = self.followed.filter(
            Follow.followed_id == user.id
        ).first()

        return not follow is None
    
    def is_followed_by(self, user):
        """ whether self is followed by user
        """
        follow = self.followers.filter(
            Follow.follower_id == user.id
        ).first()

        return not follow is None
